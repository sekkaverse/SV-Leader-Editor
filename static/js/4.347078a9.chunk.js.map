{"version":3,"sources":["components/LeaderAnimationsEditor.jsx"],"names":["window","PIXI","require","LeaderAnimationsEditor","props","updatePixiCnt","element","pixi_cnt","children","length","appendChild","app","view","setup","loader","baseUrl","add","load","resources","spine_data","spineData","loadSpineData","animation","stage","removeChild","spine","Spine","x","screen","width","y","height","scale","set","animScale","skins","skeleton","setSkinByName","name","addChild","state","setAnimation","loading","setState","renderButtons","animations","map","type","onClick","style","margin","key","renderSkinButtons","attachments","marginBottom","borderBottom","paddingTop","t","skin","collectImage","e","reader","FileReader","elem","onload","image","target","result","readAsDataURL","files","value","collectJson","json","readAsText","collectAtlas","atlas","redoSpine","rawSkeletonData","JSON","parse","rawAtlasData","spineAtlas","core","TextureAtlas","line","callback","BaseTexture","from","spineAtlasLoader","AtlasAttachmentLoader","spineJsonParser","SkeletonJson","readSkeletonData","innerWidth","innerHeight","transparent","this","position","top","left","ref","display","htmlFor","id","accept","onChange","React","Component","withTranslation"],"mappings":"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","file":"static/js/4.347078a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as PIXI from 'pixi.js';\r\nimport { withTranslation } from 'react-i18next';\r\nimport {\r\n  ForegroundDiv,\r\n  DimBackground,\r\n  StyledDiv,\r\n  ResponsiveButton,\r\n  ResponsiveLabel,\r\n  HiddenInput\r\n} from '../styles/leaderAnimationStyles';\r\n\r\nwindow.PIXI = PIXI;\r\nrequire(\"pixi-spine\")\r\n\r\n// this component is all kinds of messed up, I should be using state properly\r\nclass LeaderAnimationsEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {image: null, atlas: null, json: null};\r\n    this.loading = true;\r\n    this.pixi_cnt = null;\r\n    this.app = new PIXI.Application({width: window.innerWidth > window.innerHeight ? window.innerWidth / 2 : window.innerWidth, height: window.innerWidth > window.innerHeight ? window.innerWidth / 2 : window.innerWidth, transparent:false});\r\n    this.animation = null;\r\n    this.animScale = 0.6;\r\n    this.spine_data = null;\r\n  };\r\n\r\n  updatePixiCnt = (element) => {\r\n    this.pixi_cnt = element;\r\n    if(this.pixi_cnt && this.pixi_cnt.children.length<=0) {\r\n      this.pixi_cnt.appendChild(this.app.view);\r\n      this.setup();\r\n    }\r\n  };\r\n\r\n  setup = () => {\r\n    this.app.loader.baseUrl = 'https://pure-dusk-77493.herokuapp.com/assets';\r\n    this.app.loader\r\n    .add('class_3301.json', 'class_3301.json')\r\n    .load((loader, resources) => {\r\n        this.spine_data = resources['class_3301.json'].spineData;\r\n        this.loadSpineData();\r\n    });\r\n  };\r\n\r\n  loadSpineData = () => {\r\n    if (this.animation !== null) {\r\n      this.app.stage.removeChild(this.animation);\r\n    }\r\n\r\n    this.animation = new window.PIXI.spine.Spine(this.spine_data);\r\n\r\n    this.animation.x = this.app.screen.width / 2;\r\n    this.animation.y = this.app.screen.height / 2;\r\n    this.animation.scale.set(this.animScale);\r\n\r\n    if (this.animation.spineData.skins.length > 1) {\r\n      this.animation.skeleton.setSkinByName(this.animation.spineData.skins[1].name);\r\n    }\r\n\r\n    this.app.stage.addChild(this.animation);\r\n\r\n    this.animation.state.setAnimation(0, 'idle', true);\r\n    this.loading = false;\r\n    this.setState(this.state);\r\n  }\r\n\r\n  renderButtons = () => {\r\n    if(this.animation) {\r\n      return(\r\n        this.animation.spineData.animations.map((animation) => (\r\n          <ResponsiveButton\r\n            type=\"button\"\r\n            onClick={() => this.animation.state.setAnimation(0, animation.name, true)}\r\n            style={{ margin: '5px' }}\r\n            key={`button${animation.name}`}\r\n          >\r\n            {animation.name}\r\n          </ResponsiveButton>\r\n        ))\r\n      )\r\n    }\r\n  };\r\n\r\n  renderSkinButtons = () => {\r\n    if(this.animation\r\n      && this.animation.spineData.skins.length > 1\r\n      && this.animation.spineData.skins[1].attachments.length !== 0) {\r\n      return(\r\n        <>\r\n          <p style={{ marginBottom: '20px', borderBottom: '2px solid pink', paddingTop: '14px' }}>{this.props.t('Switch expression')}</p>\r\n          {this.animation.spineData.skins.map((skin) => (\r\n            <ResponsiveButton\r\n              type=\"button\"\r\n              onClick={() => this.animation.skeleton.setSkinByName(skin.name)}\r\n              key={`skin${skin.name}`}\r\n            >\r\n              {skin.name}\r\n            </ResponsiveButton>\r\n          ))}\r\n        </>\r\n      )\r\n    }\r\n  }\r\n\r\n  collectImage = (e) => {\r\n    var reader = new FileReader();\r\n    var elem = this;\r\n    reader.onload = (e) => {\r\n      elem.setState({image: e.target.result});\r\n    }\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    e.target.value = null;\r\n  }\r\n\r\n  collectJson = (e) => {\r\n    var reader = new FileReader();\r\n    var elem = this;\r\n    reader.onload = (e) => {\r\n      elem.setState({json: e.target.result});\r\n    }\r\n    reader.readAsText(e.target.files[0]);\r\n\r\n    e.target.value = null;\r\n  }\r\n\r\n  collectAtlas = (e) => {\r\n    var reader = new FileReader();\r\n    var elem = this;\r\n    reader.onload = (e) => {\r\n      elem.setState({atlas: e.target.result});\r\n    }\r\n    reader.readAsText(e.target.files[0]);\r\n\r\n    e.target.value = null;\r\n  }\r\n\r\n  redoSpine = () => {\r\n    var rawSkeletonData = JSON.parse(this.state.json); //your skeleton.json file here\r\n    var rawAtlasData = this.state.atlas; //your atlas file \r\n\r\n    var elem = this;\r\n    var spineAtlas = new window.PIXI.spine.core.TextureAtlas(rawAtlasData, function(line, callback) {\r\n        // pass the image here.\r\n        callback(window.PIXI.BaseTexture.from(elem.state.image));\r\n    }); // specify path, image.png will be added automatically\r\n\r\n    var spineAtlasLoader = new window.PIXI.spine.core.AtlasAttachmentLoader(spineAtlas)\r\n    var spineJsonParser = new window.PIXI.spine.core.SkeletonJson(spineAtlasLoader);\r\n\r\n    this.spine_data = spineJsonParser.readSkeletonData(rawSkeletonData);\r\n\r\n    this.loadSpineData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DimBackground>\r\n        <ForegroundDiv>\r\n          { this.loading && <p style={{ position: 'absolute', top: '50%', left: '50%' }}>Loading...</p> }\r\n          <StyledDiv ref={this.updatePixiCnt} style={{ display: this.loading ? 'hidden' : 'inline' }} />\r\n          <div style={{ display: 'inline' }}>\r\n            <p style={{ marginBottom: '20px', borderBottom: '2px solid pink', paddingTop: '14px' }}>{this.props.t('Switch animation')}</p>\r\n            <div>\r\n              {this.renderButtons()}\r\n            </div>\r\n            <div>\r\n              {this.renderSkinButtons()}\r\n            </div>\r\n            { this.animation &&\r\n            <div>\r\n              <ResponsiveButton\r\n                style={{ width: '5vw' }}\r\n                onClick={() => {\r\n                  this.animScale += 0.1\r\n                  this.animation.scale.set(this.animScale);\r\n                  }}>\r\n                Zoom +\r\n              </ResponsiveButton>\r\n              <ResponsiveButton\r\n                style={{ width: '5vw' }}\r\n                onClick={() => {\r\n                  this.animScale -= 0.1\r\n                  this.animation.scale.set(this.animScale);\r\n                  }}>\r\n                Zoom -\r\n              </ResponsiveButton>\r\n            </div>\r\n            }\r\n            <div>\r\n              <ResponsiveLabel\r\n                htmlFor=\"image\"\r\n                style={{ width: '5vw' }}>\r\n                Upload PNG {this.state.image === null ? \"(0/1)\" : \"(1/1)\" }\r\n              </ResponsiveLabel>\r\n                <HiddenInput type=\"file\" id=\"image\" accept=\"image/*\" onChange={this.collectImage} >\r\n                </HiddenInput>\r\n              <ResponsiveLabel\r\n                htmlFor=\"atlas\"\r\n                style={{ width: '5vw' }}>\r\n                Upload Atlas {this.state.atlas === null ? \"(0/1)\" : \"(1/1)\" }\r\n                <HiddenInput type=\"file\" id=\"atlas\" accept=\"*/*\" onChange={this.collectAtlas} >\r\n                </HiddenInput>\r\n              </ResponsiveLabel><ResponsiveLabel\r\n                htmlFor=\"json\"\r\n                style={{ width: '5vw' }}>\r\n                Upload JSON {this.state.json === null ? \"(0/1)\" : \"(1/1)\" }\r\n                <HiddenInput type=\"file\" id=\"json\" accept=\"json/*\" onChange={this.collectJson} >\r\n                </HiddenInput>\r\n              </ResponsiveLabel>\r\n            </div>\r\n            <div>\r\n              <ResponsiveButton\r\n                style={{ width: '5vw' }}\r\n                onClick={() => {\r\n                  this.redoSpine();\r\n                  }}>\r\n                Redo Spine\r\n              </ResponsiveButton>\r\n            </div>\r\n            <div>\r\n              <h3>Instructions</h3>\r\n              <ol style={{ \"textAlign\": 'left' }}>\r\n                <li>Use UnityEX to open ui_class_XXXX.unity3d.</li>\r\n                <li>Extract \"class_XXXX.txt\" to a file. This is the JSON file input.</li>\r\n                <li>Extract \"class_XXXX.atlas.txt\" to a file. This is the ATLAS file input.</li>\r\n                <li>Extract \"class_XXXX_A.tex\" and \"class_XXXX.tex\".</li>\r\n                <li>Edit as needed.</li>\r\n                <li>Use the alpha as a transparency map to get a partially transparent PNG file.</li>\r\n                <li>Upload to the image field.</li>\r\n                <li>Press \"Redo Spine\"</li>\r\n              </ol>\r\n            </div>\r\n          </div>\r\n\r\n        </ForegroundDiv>\r\n      </DimBackground>\r\n    );\r\n  }\r\n};\r\n\r\nexport default withTranslation()(LeaderAnimationsEditor);\r\n"],"sourceRoot":""}